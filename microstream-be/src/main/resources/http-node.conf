include "base.conf"

akka {
  loglevel = INFO

  remote {
    artery {
      enabled = on
      transport = tcp
      canonical.hostname = ${clustering.ip}
      canonical.port = ${clustering.port}
    }
  }

  actor {
    provider = "cluster"
  }

  cluster {
    roles=["http"]
    sharding {
      number-of-shards = 30
      passivate-idle-entity-after = 2 minutes
      role = "channel"
    }
    seed-nodes = [
      "akka://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
  
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    split-brain-resolver.active-strategy = keep-majority
    split-brain-resolver.keep-majority {
      role = "channel"
    }
  }

  coordinated-shutdown.terminate-actor-system = on

  http {
    server {
      default-http-port = 8080
    }
  }
}

clustering {
  cluster.name = microstream
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}
  port = 1600
  port = ${?CLUSTER_PORT}
  seed-ip = "127.0.0.1"
  seed-ip = ${?CLUSTER_IP}
  seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
  seed-port = 1600
  seed-port = ${?SEED_PORT_1600_TCP_PORT}
}


akka-http-cors {
  allowed-origins = [
    "http://localhost:3000",   
    "https://localhost:3000",
    "ws://localhost:3000",
    "wss://localhost:3000",  
    "https://microstream.ch", 
    "https://*.microstream.ch", 
    "https://www.microstream.ch",
    "wss://microstream.ch",
    "wss://*.microstream.ch", 
    "wss://www.microstream.ch", 

    # websocket testing tool - not for prod
    "chrome-extension://cbcbkhdmedgianpaifchdaddpnmgnknn"
  ]
}

app {
  # If ask takes more time than this to complete the request is failed
  channel-service.ask-timeout = 4s
}

