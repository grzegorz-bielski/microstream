include "base.conf"

akka {
  actor {
    provider = cluster
  }

  loglevel = INFO

  remote.artery {
    enabled = on
    transport = tcp
    canonical.port = ${clustering.port}
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        # For the kubernetes API this value is substributed into the %s in pod-label-selector
        service-name = ${clustering.cluster.name}
        port-name = "akka-mgmt"
        # pick the discovery method you'd like to use:
        discovery-method = kubernetes-api

        required-contact-point-nr = 2
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }
  }

  cluster {
    roles=["http", "k8s"]
    sharding {
      number-of-shards = 30
      passivate-idle-entity-after = 2 minutes
      role = "channel"
    }

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    split-brain-resolver.active-strategy = keep-majority
    split-brain-resolver.keep-majority {
      role = "channel"
    }

    shutdown-after-unsuccessful-join-seed-nodes = 60s # k8s will try to re-create the pod after 60s
  }

  coordinated-shutdown.exit-jm = on # allow k8s to recreate the pod on total failure

  http {
    server {
      default-http-port = 8080
    }
  }
}

akka-http-cors {
  allowed-origins = [
    "http://localhost:3000",   
    "https://localhost:3000",
    "ws://localhost:3000",
    "wss://localhost:3000",  
    "https://microstream.ch", 
    "https://*.microstream.ch", 
    "https://www.microstream.ch",
    "wss://microstream.ch",
    "wss://*.microstream.ch", 
    "wss://www.microstream.ch", 

    # websocket testing tool - not for prod
    "chrome-extension://cbcbkhdmedgianpaifchdaddpnmgnknn"
  ]
}

clustering {
  port = 2552
  defaultPort = ${clustering.port}
}

app {
  # If ask takes more time than this to complete the request is failed
  channel-service.ask-timeout = 4s
}

